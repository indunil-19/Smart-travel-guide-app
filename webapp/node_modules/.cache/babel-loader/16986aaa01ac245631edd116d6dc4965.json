{"ast":null,"code":"var _jsxFileName = \"D:\\\\sem 5 project travel guide app\\\\Smart-travel-guide-app\\\\adminportal\\\\src\\\\screens\\\\TravelPlanApp\\\\customPlan.js\",\n    _s = $RefreshSig$();\n\nimport { Flex, VStack, HStack } from '@chakra-ui/layout';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport { useState, useEffect } from \"react\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CustomPlan = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      width: \"100%\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(GMAP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n};\n_c = CustomPlan;\nexport const Map = () => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const [place, setPlace] = useState([]);\n  const [placeID, setPlaceID] = useState(0);\n\n  const addTOPlaces = poi => {\n    const x = place.map(i => {\n      return i;\n    });\n    x.push(poi);\n    setPlace(x);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      style: {},\n      defaultZoom: 8,\n      defaultCenter: {\n        lat: 7.691418,\n        lng: 80.636696\n      } // defaultOptions={{ styles: mapStyles }}\n      ,\n      children: place && place.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Marker, {\n            position: item.geometry.location,\n            onClick: () => {\n              setOpen(true);\n              setPlaceID(index);\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 24\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      style: {\n        width: \"40%\",\n        height: \"30px\",\n        padding: \"5px\",\n        margin: \"15px\",\n        background: \"grey\",\n        borderRadius: \"5px\",\n        color: \"white\"\n      },\n      apiKey: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\n      onPlaceSelected: poi => {\n        addTOPlaces(poi);\n      },\n      options: {\n        types: ['geocode', 'establishment'],\n        componentRestrictions: {\n          country: \"LK\"\n        },\n        fields: [\"ALL\"]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: place && place.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            children: /*#__PURE__*/_jsxDEV(HStack, {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: [item.name, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Map, \"jwFBmGY/PwKt9EpdJU2vgiWht14=\");\n\n_c2 = Map;\nconst MapWrapped = withScriptjs(_c3 = withGoogleMap(Map));\n_c4 = MapWrapped;\nexport function GMAP() {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    height: \"150vh\",\n    boxShadow: \"dark-lg\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"80%\",\n    children: /*#__PURE__*/_jsxDEV(MapWrapped, {\n      googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY`,\n      loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: `100%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 27\n      }, this),\n      containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: `100%`,\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }, this),\n      mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: `50%`,\n          height: \"80%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n}\n_c5 = GMAP;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"CustomPlan\");\n$RefreshReg$(_c2, \"Map\");\n$RefreshReg$(_c3, \"MapWrapped$withScriptjs\");\n$RefreshReg$(_c4, \"MapWrapped\");\n$RefreshReg$(_c5, \"GMAP\");","map":{"version":3,"sources":["D:/sem 5 project travel guide app/Smart-travel-guide-app/adminportal/src/screens/TravelPlanApp/customPlan.js"],"names":["Flex","VStack","HStack","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","useState","useEffect","Autocomplete","CustomPlan","Map","open","setOpen","place","setPlace","placeID","setPlaceID","addTOPlaces","poi","x","map","i","push","lat","lng","item","index","geometry","location","width","height","padding","margin","background","borderRadius","color","types","componentRestrictions","country","fields","name","MapWrapped","GMAP"],"mappings":"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","sourcesContent":["import { Flex,VStack,HStack } from '@chakra-ui/layout';\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\r\nimport {useState,useEffect} from \"react\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\n\r\n\r\nexport const CustomPlan=()=>{\r\n    \r\n    return(\r\n        <>\r\n       <Flex width=\"100%\" alignItems=\"center\" flexDirection=\"column\" justifyContent=\"center\">\r\n\r\n        \r\n             <GMAP />\r\n            \r\n\r\n      </Flex>\r\n        \r\n    \r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Map=()=>{\r\n  const [open,setOpen]=useState(false);\r\n  const [place,setPlace]=useState([])\r\n  const [placeID,setPlaceID]=useState(0)\r\n\r\n  const addTOPlaces=(poi)=>{\r\n     const x= place.map((i)=>{\r\n        return(i)\r\n      })\r\n    x.push(poi)\r\n    setPlace(x)\r\n  }\r\n  \r\n    return(\r\n        <>\r\n       \r\n\r\n          <GoogleMap style={{}}\r\n            defaultZoom={8}\r\n            defaultCenter={{ lat: 7.691418, lng:80.636696}}\r\n            // defaultOptions={{ styles: mapStyles }}\r\n          >\r\n\r\n\r\n             \r\n\r\n              {place && place.map((item,index)=>{\r\n                    return(\r\n                      <>\r\n\r\n                       <Marker key={index} position={item.geometry.location} onClick={()=>{setOpen(true); setPlaceID(index)}} />\r\n                      \r\n                      </>\r\n                    )\r\n                     \r\n\r\n              })}\r\n\r\n\r\n              {/* { open && <InfoWindow  onCloseClick={()=>setOpen(false)}\r\n              position={\r\n                place[placeID].geometry.location\r\n              }\r\n              >\r\n                <>\r\n                <h1>{place[placeID].name}</h1>\r\n\r\n                <img src={place[placeID].photos[0].getUrl()} ></img>\r\n\r\n                <p>{place[placeID].formatted_address}</p>\r\n                </>\r\n                \r\n                </InfoWindow>\r\n                \r\n              } */}\r\n\r\n          \r\n\r\n\r\n\r\n          </GoogleMap>\r\n\r\n\r\n       \r\n\r\n\r\n          \r\n        <Autocomplete style={{width:\"40%\" ,height:\"30px\", padding:\"5px\", margin:\"15px\",background:\"grey\", borderRadius:\"5px\", color:\"white\"}}\r\n        apiKey={\"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\"}\r\n\r\n        onPlaceSelected={(poi) => {\r\n            \r\n          addTOPlaces(poi)\r\n            \r\n        }}\r\n\r\n        options={{\r\n            types: ['geocode' , 'establishment'],\r\n            componentRestrictions: { country: \"LK\" },\r\n            fields:[\"ALL\"]\r\n        }}\r\n        >\r\n\r\n        </Autocomplete>\r\n\r\n        <Flex>\r\n          {place && place.map((item,index)=>{\r\n            return(\r\n              <>\r\n              \r\n              <Flex>\r\n                <HStack>\r\n                  <h1>{index+1}</h1>\r\n                  <h1>{item.name} </h1>\r\n                  \r\n                </HStack>\r\n              </Flex>\r\n              \r\n              </>\r\n            )\r\n          })}\r\n        </Flex>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst MapWrapped = withScriptjs(withGoogleMap(Map));\r\n\r\n\r\nexport  function GMAP() {\r\n    return (\r\n        <Flex height=\"150vh\"  boxShadow=\"dark-lg\" justifyContent=\"center\" alignItems=\"center\" width=\"80%\">\r\n        <MapWrapped\r\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY`}\r\n          loadingElement={<div style={{ height: `100%` }} />}\r\n          containerElement={<div style={{ height: `100%` ,width:\"100%\" }} />}\r\n          mapElement={<div style={{ width: `50%`, height:\"80%\" }} />}\r\n        />\r\n      </Flex>\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}