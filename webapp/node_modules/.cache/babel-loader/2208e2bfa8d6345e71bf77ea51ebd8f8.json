{"ast":null,"code":"//  import { Loader } from \"@googlemaps/js-api-loader\"\nconst {\n  Client\n} = require(\"@googlemaps/google-maps-services-js\");\n\nexport const getTravelPlan = async (climate, provinces, days, religion, thingsLike, placesLike) => {\n  const client = new Client({});\n  var province = provinces;\n  var climate = climate; // wet ->Western, Sabaragamuwa, Southern\n  // intermediate ->Central, Uva\n  // dry -> Northern,North Western, North Central,Eastern        \n\n  var things_you_like_to_do = thingsLike; // hiking, surfing, camping, swimming,riding boats, nothing_only_travelling \"\"\n\n  var religion = religion; //buddhist, hindu, islam, catholic, \"\"\n\n  var placeslike = placesLike; //Natural, animal, botenical gardens, parks, beaches, ancient, reliogous \n\n  var number_of_days = parseInt(days);\n  var provinceData = {\n    \"Northern\": [9.112945, 80.477003],\n    \"North Western\": [7.612998, 80.180174],\n    \"Western\": [6.904614, 80.037256],\n    \"North Central\": [8.331083, 80.641908],\n    \"Central\": [7.318882, 80.696876],\n    \"Sabaragamuwa\": [6.697343, 80.509984],\n    \"Eastern\": [7.602108, 81.598357],\n    \"Uva\": [6.751896, 81.290534],\n    \"Southern\": [6.058624, 80.414907]\n  };\n  var climateData = {\n    \"wet\": [\"Western\", \"Sabaragamuwa\", \"Southern\"],\n    \"intermediate\": [\"Central\", \"Uva\"],\n    \"dry\": [\"Northern\", \"North Western\", \"North Central\", \"Eastern\"]\n  };\n  var pois = new Array();\n  var Allpois = new Array(); // user preferences analysis\n\n  function userPreferencesAnalysis() {\n    let reqArr = [];\n    let pro = [];\n\n    if (climate) {\n      pro = climateData[climate].filter(x => province.includes(x));\n\n      if (pro.length == 0) {\n        pro = climateData[climate];\n      }\n    }\n\n    let R = \"50000\";\n    pro.forEach(ele => {\n      if (ele == \"Northern\") R = \"5000\";\n      things_you_like_to_do.forEach(x => {\n        let req = {\n          location: {\n            lat: provinceData[ele][0],\n            lng: provinceData[ele][1]\n          },\n          radius: R,\n          query: x,\n          type: ['tourist_attraction'],\n          // \n          key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\n          rating: 4\n        };\n        reqArr.push(req);\n      });\n      placeslike.forEach(x => {\n        if (x == \"reliogous\") {\n          let req = {\n            location: {\n              lat: provinceData[ele][0],\n              lng: provinceData[ele][1]\n            },\n            radius: R,\n            query: x + religion,\n            type: ['tourist_attraction'],\n            // rankBy :google.maps.places.RankBy.DISTANCE,\n            key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\n            rating: 4\n          };\n          reqArr.push(req);\n        } else {\n          let req = {\n            location: {\n              lat: provinceData[ele][0],\n              lng: provinceData[ele][1]\n            },\n            radius: R,\n            query: x,\n            type: ['tourist_attraction'],\n            // rankBy :google.maps.places.RankBy.DISTANCE,\n            key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\n            rating: 4\n          };\n          reqArr.push(req);\n        }\n      });\n    });\n    return reqArr;\n  }\n\n  async function initMap() {\n    userPreferencesAnalysis().forEach(async x => {\n      findPOIS(x);\n    });\n    await new Promise(r => setTimeout(r, 6000));\n    return [await calculateAndDisplayRoute(), Allpois];\n  }\n\n  return await initMap(); // find point of interersts for a request\n\n  function findPOIS(request) {\n    return client.textSearch({\n      params: request,\n      timeout: 1000 // milliseconds\n\n    }).then(r => {\n      addPlaces(r.data.results);\n      return;\n    }).catch(e => {\n      console.log(e);\n    });\n  } // add placess to map\n\n\n  function addPlaces(results) {\n    for (var i = 0; i < results.length; i++) {\n      var place = results[i];\n\n      if (results[i].rating >= 4.3) {\n        Allpois.push(place);\n\n        if (pois.length <= number_of_days * 8) {\n          if (Math.random() > 0.5) {\n            pois.push(place);\n          }\n\n          ;\n        }\n      }\n    }\n  }\n\n  async function calculateAndDisplayRoute() {\n    const waypts = [];\n\n    for (let i = 0; i < pois.length; i++) {\n      waypts.push(pois[i].geometry.location);\n    }\n\n    return client.directions({\n      params: {\n        origin: {\n          lat: 6.927079,\n          lng: 79.857750\n        },\n        destination: {\n          lat: 6.927079,\n          lng: 79.857750\n        },\n        optimizeWaypoints: true,\n        waypoints: waypts,\n        travelMode: 'DRIVING',\n        key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\"\n      }\n    }).then(response => {\n      const route = response.data.routes[0];\n      let day1 = [];\n      let day2 = [];\n      let day3 = [];\n      let time = 0;\n\n      for (let i = 0; i < route.legs.length - 1; i++) {\n        time = time + route.legs[i].duration.value + 3600;\n\n        if (time < 32400) {\n          day1.push(pois[route.waypoint_order[i]]);\n        } else if (time < 64800) {\n          day2.push(pois[route.waypoint_order[i]]);\n        } else if (time < 97200) {\n          day3.push(pois[route.waypoint_order[i]]);\n        }\n      }\n\n      if (number_of_days == 1) return [[day1], route.legs.slice(0, day1.length)];else if (number_of_days == 2) return [[day1, day2], route.legs.slice(0, day1.length + day2.length)];else if (number_of_days == 3) return [[day1, day2, day3], route.legs.slice()];else return [[], []];\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n};","map":{"version":3,"sources":["D:/sem 5 project travel guide app/Smart-travel-guide-app/adminportal/src/services/TravelPlanService.js"],"names":["Client","require","getTravelPlan","climate","provinces","days","religion","thingsLike","placesLike","client","province","things_you_like_to_do","placeslike","number_of_days","parseInt","provinceData","climateData","pois","Array","Allpois","userPreferencesAnalysis","reqArr","pro","filter","x","includes","length","R","forEach","ele","req","location","lat","lng","radius","query","type","key","rating","push","initMap","findPOIS","Promise","r","setTimeout","calculateAndDisplayRoute","request","textSearch","params","timeout","then","addPlaces","data","results","catch","e","console","log","i","place","Math","random","waypts","geometry","directions","origin","destination","optimizeWaypoints","waypoints","travelMode","response","route","routes","day1","day2","day3","time","legs","duration","value","waypoint_order","slice"],"mappings":"AAAA;AACA,MAAM;AAACA,EAAAA;AAAD,IAAWC,OAAO,CAAC,qCAAD,CAAxB;;AAEA,OAAO,MAAMC,aAAa,GAAC,OAAMC,OAAN,EAAcC,SAAd,EAAwBC,IAAxB,EAA6BC,QAA7B,EAAsCC,UAAtC,EAAiDC,UAAjD,KAA8D;AAErF,QAAMC,MAAM,GAAG,IAAIT,MAAJ,CAAW,EAAX,CAAf;AACA,MAAIU,QAAQ,GAACN,SAAb;AACA,MAAID,OAAO,GAACA,OAAZ,CAJqF,CAKrF;AACA;AACA;;AACA,MAAIQ,qBAAqB,GAACJ,UAA1B,CARqF,CASrF;;AACA,MAAID,QAAQ,GAACA,QAAb,CAVqF,CAWrF;;AACA,MAAIM,UAAU,GAACJ,UAAf,CAZqF,CAarF;;AACA,MAAIK,cAAc,GAACC,QAAQ,CAACT,IAAD,CAA3B;AAEA,MAAIU,YAAY,GAAC;AACf,gBAAW,CAAC,QAAD,EAAU,SAAV,CADI;AAEf,qBAAgB,CAAC,QAAD,EAAU,SAAV,CAFD;AAGf,eAAU,CAAC,QAAD,EAAU,SAAV,CAHK;AAIf,qBAAgB,CAAC,QAAD,EAAU,SAAV,CAJD;AAKf,eAAU,CAAC,QAAD,EAAU,SAAV,CALK;AAMf,oBAAe,CAAC,QAAD,EAAU,SAAV,CANA;AAOf,eAAU,CAAC,QAAD,EAAU,SAAV,CAPK;AAQf,WAAM,CAAC,QAAD,EAAU,SAAV,CARS;AASf,gBAAW,CAAC,QAAD,EAAU,SAAV;AATI,GAAjB;AAWA,MAAIC,WAAW,GAAC;AACd,WAAM,CAAC,SAAD,EAAY,cAAZ,EAA4B,UAA5B,CADQ;AAEd,oBAAe,CAAC,SAAD,EAAY,KAAZ,CAFD;AAGb,WAAM,CAAC,UAAD,EAAY,eAAZ,EAA6B,eAA7B,EAA6C,SAA7C;AAHO,GAAhB;AAMA,MAAIC,IAAI,GAAC,IAAIC,KAAJ,EAAT;AACA,MAAIC,OAAO,GAAC,IAAID,KAAJ,EAAZ,CAlCqF,CAoCrF;;AACA,WAASE,uBAAT,GAAkC;AAChC,QAAIC,MAAM,GAAC,EAAX;AACA,QAAIC,GAAG,GAAC,EAAR;;AACA,QAAGnB,OAAH,EAAW;AACTmB,MAAAA,GAAG,GAACN,WAAW,CAACb,OAAD,CAAX,CAAqBoB,MAArB,CAA4BC,CAAC,IAAEd,QAAQ,CAACe,QAAT,CAAkBD,CAAlB,CAA/B,CAAJ;;AACA,UAAGF,GAAG,CAACI,MAAJ,IAAY,CAAf,EAAiB;AACfJ,QAAAA,GAAG,GAACN,WAAW,CAACb,OAAD,CAAf;AAED;AACF;;AACD,QAAIwB,CAAC,GAAC,OAAN;AACAL,IAAAA,GAAG,CAACM,OAAJ,CAAYC,GAAG,IAAI;AACjB,UAAGA,GAAG,IAAE,UAAR,EAAqBF,CAAC,GAAC,MAAF;AACrBhB,MAAAA,qBAAqB,CAACiB,OAAtB,CAA8BJ,CAAC,IAAE;AAC/B,YAAIM,GAAG,GAAC;AACNC,UAAAA,QAAQ,EAAG;AAAEC,YAAAA,GAAG,EAACjB,YAAY,CAACc,GAAD,CAAZ,CAAkB,CAAlB,CAAN;AAA4BI,YAAAA,GAAG,EAAClB,YAAY,CAACc,GAAD,CAAZ,CAAkB,CAAlB;AAAhC,WADL;AAENK,UAAAA,MAAM,EAAEP,CAFF;AAGNQ,UAAAA,KAAK,EAAEX,CAHD;AAINY,UAAAA,IAAI,EAAC,CAAC,oBAAD,CAJC;AAKN;AACAC,UAAAA,GAAG,EAAE,yCANC;AAONC,UAAAA,MAAM,EAAC;AAPD,SAAR;AASAjB,QAAAA,MAAM,CAACkB,IAAP,CAAYT,GAAZ;AACD,OAXD;AAYAlB,MAAAA,UAAU,CAACgB,OAAX,CAAmBJ,CAAC,IAAE;AACpB,YAAGA,CAAC,IAAE,WAAN,EAAkB;AAChB,cAAIM,GAAG,GAAC;AACNC,YAAAA,QAAQ,EAAG;AAAEC,cAAAA,GAAG,EAACjB,YAAY,CAACc,GAAD,CAAZ,CAAkB,CAAlB,CAAN;AAA4BI,cAAAA,GAAG,EAAClB,YAAY,CAACc,GAAD,CAAZ,CAAkB,CAAlB;AAAhC,aADL;AAENK,YAAAA,MAAM,EAAEP,CAFF;AAGNQ,YAAAA,KAAK,EAAEX,CAAC,GAAClB,QAHH;AAIN8B,YAAAA,IAAI,EAAC,CAAC,oBAAD,CAJC;AAKN;AACAC,YAAAA,GAAG,EAAE,yCANC;AAONC,YAAAA,MAAM,EAAC;AAPD,WAAR;AASAjB,UAAAA,MAAM,CAACkB,IAAP,CAAYT,GAAZ;AACD,SAXD,MAWK;AACH,cAAIA,GAAG,GAAC;AACNC,YAAAA,QAAQ,EAAG;AAAEC,cAAAA,GAAG,EAACjB,YAAY,CAACc,GAAD,CAAZ,CAAkB,CAAlB,CAAN;AAA4BI,cAAAA,GAAG,EAAClB,YAAY,CAACc,GAAD,CAAZ,CAAkB,CAAlB;AAAhC,aADL;AAENK,YAAAA,MAAM,EAAEP,CAFF;AAGNQ,YAAAA,KAAK,EAAEX,CAHD;AAINY,YAAAA,IAAI,EAAC,CAAC,oBAAD,CAJC;AAKN;AACAC,YAAAA,GAAG,EAAE,yCANC;AAONC,YAAAA,MAAM,EAAC;AAPD,WAAR;AAUFjB,UAAAA,MAAM,CAACkB,IAAP,CAAYT,GAAZ;AACD;AAAC,OAxBF;AA0BD,KAxCD;AA0CA,WAAOT,MAAP;AACD;;AACA,iBAAemB,OAAf,GAAyB;AACtBpB,IAAAA,uBAAuB,GAAGQ,OAA1B,CAAkC,MAAMJ,CAAN,IAAU;AACtCiB,MAAAA,QAAQ,CAACjB,CAAD,CAAR;AACL,KAFD;AAGA,UAAM,IAAIkB,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA3B,CAAN;AACA,WAAQ,CAAE,MAAME,wBAAwB,EAAhC,EAAmC1B,OAAnC,CAAR;AAGH;;AAED,SAAO,MAAMqB,OAAO,EAApB,CAtGqF,CAyGrF;;AACC,WAASC,QAAT,CAAkBK,OAAlB,EAA0B;AAEvB,WAAOrC,MAAM,CACVsC,UADI,CACO;AACVC,MAAAA,MAAM,EAAEF,OADE;AAEVG,MAAAA,OAAO,EAAE,IAFC,CAEK;;AAFL,KADP,EAKJC,IALI,CAKEP,CAAD,IAAO;AACXQ,MAAAA,SAAS,CAACR,CAAC,CAACS,IAAF,CAAOC,OAAR,CAAT;AACA;AACD,KARI,EASJC,KATI,CASGC,CAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KAXI,CAAP;AAaH,GAzHoF,CA0HrF;;;AACA,WAASJ,SAAT,CAAmBE,OAAnB,EAA4B;AACxB,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAAC3B,MAA5B,EAAoCgC,CAAC,EAArC,EAAyC;AACzC,UAAIC,KAAK,GAAGN,OAAO,CAACK,CAAD,CAAnB;;AACA,UAAGL,OAAO,CAACK,CAAD,CAAP,CAAWpB,MAAX,IAAmB,GAAtB,EAA0B;AACxBnB,QAAAA,OAAO,CAACoB,IAAR,CAAaoB,KAAb;;AACA,YAAG1C,IAAI,CAACS,MAAL,IAAab,cAAc,GAAC,CAA/B,EAAiC;AAC/B,cAAG+C,IAAI,CAACC,MAAL,KAAc,GAAjB,EAAsB;AACpB5C,YAAAA,IAAI,CAACsB,IAAL,CAAUoB,KAAV;AAED;;AAAA;AACF;AACF;AACF;AACF;;AAED,iBAAed,wBAAf,GAA0C;AACxC,UAAMiB,MAAM,GAAG,EAAf;;AAGA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzC,IAAI,CAACS,MAAzB,EAAiCgC,CAAC,EAAlC,EAAsC;AAClCI,MAAAA,MAAM,CAACvB,IAAP,CACGtB,IAAI,CAACyC,CAAD,CAAJ,CAAQK,QAAR,CAAiBhC,QADpB;AAIH;;AAED,WAAOtB,MAAM,CACZuD,UADM,CACK;AAAChB,MAAAA,MAAM,EAAC;AAChBiB,QAAAA,MAAM,EAAC;AAACjC,UAAAA,GAAG,EAAC,QAAL;AAAcC,UAAAA,GAAG,EAAC;AAAlB,SADS;AAEhBiC,QAAAA,WAAW,EAAC;AAAClC,UAAAA,GAAG,EAAC,QAAL;AAAcC,UAAAA,GAAG,EAAC;AAAlB,SAFI;AAGhBkC,QAAAA,iBAAiB,EAAE,IAHH;AAIhBC,QAAAA,SAAS,EAAEN,MAJK;AAKhBO,QAAAA,UAAU,EAAE,SALI;AAMhBhC,QAAAA,GAAG,EAAE;AANW;AAAR,KADL,EAUJa,IAVI,CAUEoB,QAAD,IAAc;AAClB,YAAMC,KAAK,GAAGD,QAAQ,CAAClB,IAAT,CAAcoB,MAAd,CAAqB,CAArB,CAAd;AAEA,UAAIC,IAAI,GAAC,EAAT;AACA,UAAIC,IAAI,GAAC,EAAT;AACA,UAAIC,IAAI,GAAC,EAAT;AACA,UAAIC,IAAI,GAAC,CAAT;;AAEC,WAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,KAAK,CAACM,IAAN,CAAWnD,MAAX,GAAkB,CAAtC,EAAyCgC,CAAC,EAA1C,EAA8C;AAC5CkB,QAAAA,IAAI,GAACA,IAAI,GAACL,KAAK,CAACM,IAAN,CAAWnB,CAAX,EAAcoB,QAAd,CAAuBC,KAA5B,GAAkC,IAAvC;;AAEA,YAAGH,IAAI,GAAC,KAAR,EAAe;AACbH,UAAAA,IAAI,CAAClC,IAAL,CAAUtB,IAAI,CAACsD,KAAK,CAACS,cAAN,CAAqBtB,CAArB,CAAD,CAAd;AAEC,SAHH,MAIK,IAAGkB,IAAI,GAAC,KAAR,EAAe;AAClBF,UAAAA,IAAI,CAACnC,IAAL,CAAUtB,IAAI,CAACsD,KAAK,CAACS,cAAN,CAAqBtB,CAArB,CAAD,CAAd;AAEG,SAHA,MAIA,IAAGkB,IAAI,GAAC,KAAR,EAAgB;AACnBD,UAAAA,IAAI,CAACpC,IAAL,CAAUtB,IAAI,CAACsD,KAAK,CAACS,cAAN,CAAqBtB,CAArB,CAAD,CAAd;AAEE;AAEP;;AAGD,UAAG7C,cAAc,IAAE,CAAnB,EAAsB,OAAO,CAAC,CAAC4D,IAAD,CAAD,EAAQF,KAAK,CAACM,IAAN,CAAWI,KAAX,CAAiB,CAAjB,EAAoBR,IAAI,CAAC/C,MAAzB,CAAR,CAAP,CAAtB,KACK,IAAGb,cAAc,IAAE,CAAnB,EAAsB,OAAO,CAAC,CAAC4D,IAAD,EAAMC,IAAN,CAAD,EAAaH,KAAK,CAACM,IAAN,CAAWI,KAAX,CAAiB,CAAjB,EAAoBR,IAAI,CAAC/C,MAAL,GAAYgD,IAAI,CAAChD,MAArC,CAAb,CAAP,CAAtB,KACA,IAAIb,cAAc,IAAE,CAApB,EAAuB,OAAO,CAAC,CAAC4D,IAAD,EAAMC,IAAN,EAAWC,IAAX,CAAD,EAAkBJ,KAAK,CAACM,IAAN,CAAWI,KAAX,EAAlB,CAAP,CAAvB,KACA,OAAO,CAAC,EAAD,EAAI,EAAJ,CAAP;AAEL,KA1CI,EA2CH3B,KA3CG,CA2CIC,CAAD,IAAM;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACF,KA7CI,CAAP;AA+CD;AACJ,CArMM","sourcesContent":["//  import { Loader } from \"@googlemaps/js-api-loader\"\r\nconst {Client} = require(\"@googlemaps/google-maps-services-js\");\r\n\r\nexport const getTravelPlan=async(climate,provinces,days,religion,thingsLike,placesLike)=>{\r\n  \r\n    const client = new Client({});\r\n    var province=provinces\r\n    var climate=climate\r\n    // wet ->Western, Sabaragamuwa, Southern\r\n    // intermediate ->Central, Uva\r\n    // dry -> Northern,North Western, North Central,Eastern        \r\n    var things_you_like_to_do=thingsLike\r\n    // hiking, surfing, camping, swimming,riding boats, nothing_only_travelling \"\"\r\n    var religion=religion\r\n    //buddhist, hindu, islam, catholic, \"\"\r\n    var placeslike=placesLike\r\n    //Natural, animal, botenical gardens, parks, beaches, ancient, reliogous \r\n    var number_of_days=parseInt(days)\r\n    \r\n    var provinceData={\r\n      \"Northern\":[9.112945,80.477003],\r\n      \"North Western\":[7.612998,80.180174],\r\n      \"Western\":[6.904614,80.037256],\r\n      \"North Central\":[8.331083,80.641908],\r\n      \"Central\":[7.318882,80.696876],\r\n      \"Sabaragamuwa\":[6.697343,80.509984],\r\n      \"Eastern\":[7.602108,81.598357],\r\n      \"Uva\":[6.751896,81.290534],\r\n      \"Southern\":[6.058624,80.414907]\r\n    }  \r\n    var climateData={\r\n      \"wet\":[\"Western\", \"Sabaragamuwa\", \"Southern\"],\r\n      \"intermediate\":[\"Central\", \"Uva\"],\r\n       \"dry\":[\"Northern\",\"North Western\", \"North Central\",\"Eastern\"]\r\n    }\r\n    \r\n    var pois=new Array()\r\n    var Allpois=new Array()\r\n    \r\n    // user preferences analysis\r\n    function userPreferencesAnalysis(){\r\n      let reqArr=[]\r\n      let pro=[];\r\n      if(climate){\r\n        pro=climateData[climate].filter(x=>province.includes(x))\r\n        if(pro.length==0){\r\n          pro=climateData[climate]\r\n    \r\n        }\r\n      }\r\n      let R=\"50000\"\r\n      pro.forEach(ele => {\r\n        if(ele==\"Northern\")  R=\"5000\";\r\n        things_you_like_to_do.forEach(x=>{\r\n          let req={\r\n            location:  { lat:provinceData[ele][0], lng:provinceData[ele][1]},\r\n            radius: R,\r\n            query: x,\r\n            type:['tourist_attraction', ],\r\n            // \r\n            key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\r\n            rating:4,\r\n          };\r\n          reqArr.push(req)\r\n        })\r\n        placeslike.forEach(x=>{\r\n          if(x==\"reliogous\"){\r\n            let req={\r\n              location:  { lat:provinceData[ele][0], lng:provinceData[ele][1]},\r\n              radius: R,\r\n              query: x+religion,\r\n              type:['tourist_attraction', ],\r\n              // rankBy :google.maps.places.RankBy.DISTANCE,\r\n              key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\r\n              rating:4,\r\n            };\r\n            reqArr.push(req)\r\n          }else{\r\n            let req={\r\n              location:  { lat:provinceData[ele][0], lng:provinceData[ele][1]},\r\n              radius: R,\r\n              query: x,\r\n              type:['tourist_attraction', ],\r\n              // rankBy :google.maps.places.RankBy.DISTANCE,\r\n              key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\r\n              rating:4,\r\n    \r\n          };\r\n          reqArr.push(req)\r\n        }})\r\n    \r\n      });\r\n    \r\n      return reqArr;\r\n    }\r\n     async function initMap() {\r\n        userPreferencesAnalysis().forEach(async(x)=>{\r\n              findPOIS(x)\r\n        })\r\n        await new Promise(r => setTimeout(r, 6000));\r\n        return  [ await calculateAndDisplayRoute(),Allpois];\r\n        \r\n      \r\n    }\r\n\r\n    return await initMap();\r\n    \r\n    \r\n    // find point of interersts for a request\r\n     function findPOIS(request){\r\n      \r\n        return client\r\n          .textSearch({\r\n            params: request,\r\n            timeout: 1000, // milliseconds\r\n          })\r\n          .then((r) => {\r\n            addPlaces(r.data.results)\r\n            return ;\r\n          })\r\n          .catch((e) => {\r\n            console.log(e);\r\n          });\r\n      \r\n    }\r\n    // add placess to map\r\n    function addPlaces(results) {\r\n        for (var i = 0; i < results.length; i++) {\r\n        var place = results[i];\r\n        if(results[i].rating>=4.3){\r\n          Allpois.push(place)\r\n          if(pois.length<=number_of_days*8){\r\n            if(Math.random()>0.5) {\r\n              pois.push(place)\r\n           \r\n            };\r\n          }    \r\n        }\r\n      } \r\n    }\r\n        \r\n    async function calculateAndDisplayRoute() {\r\n      const waypts = [];\r\n      \r\n\r\n      for (let i = 0; i < pois.length; i++) {\r\n          waypts.push(\r\n             pois[i].geometry.location,\r\n            \r\n          );\r\n      }\r\n\r\n      return client\r\n      .directions({params:{\r\n          origin:{lat:6.927079,lng:79.857750},\r\n          destination:{lat:6.927079,lng:79.857750},\r\n          optimizeWaypoints: true,\r\n          waypoints: waypts,\r\n          travelMode: 'DRIVING',\r\n          key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\r\n\r\n        }})\r\n        .then((response) => {\r\n          const route = response.data.routes[0];\r\n          \r\n          let day1=[]\r\n          let day2=[]\r\n          let day3=[]\r\n          let time=0\r\n\r\n           for (let i = 0; i < route.legs.length-1; i++) {\r\n             time=time+route.legs[i].duration.value+3600\r\n\r\n             if(time<32400) {\r\n               day1.push(pois[route.waypoint_order[i]]); \r\n\r\n               }\r\n             else if(time<64800) {\r\n               day2.push(pois[route.waypoint_order[i]]); \r\n\r\n                 }\r\n             else if(time<97200)  {\r\n               day3.push(pois[route.waypoint_order[i]]);\r\n\r\n                }\r\n          \r\n         }\r\n\r\n\r\n         if(number_of_days==1) return [[day1],route.legs.slice(0, day1.length)]\r\n         else if(number_of_days==2) return [[day1,day2],route.legs.slice(0, day1.length+day2.length)]\r\n         else if (number_of_days==3) return [[day1,day2,day3],route.legs.slice()]\r\n         else return [[],[]]\r\n\r\n        })\r\n         .catch((e) =>{ \r\n           console.log(e)\r\n        });\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}