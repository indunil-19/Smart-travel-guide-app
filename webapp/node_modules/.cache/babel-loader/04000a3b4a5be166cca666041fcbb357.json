{"ast":null,"code":"var _jsxFileName = \"D:\\\\sem 5 project travel guide app\\\\Smart-travel-guide-app\\\\adminportal\\\\src\\\\screens\\\\TravelPlanApp\\\\customPlan.js\",\n    _s = $RefreshSig$();\n\nimport { Flex, VStack, HStack } from '@chakra-ui/layout';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport { useState, useEffect, useContext } from \"react\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport { TravelContext } from \"../../context/TravelContext\";\nimport { Button, Heading, Image } from \"@chakra-ui/react\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CustomPlan = () => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const {\n    state,\n    dispatch\n  } = useContext(TravelContext);\n  const [display, setDisplay] = useState({});\n  const [p, setP] = useState([]);\n  const places = new Array();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      width: \"100%\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n        style: {\n          width: \"40%\",\n          height: \"30px\",\n          padding: \"5px\",\n          margin: \"15px\",\n          background: \"grey\",\n          borderRadius: \"5px\",\n          color: \"white\"\n        },\n        apiKey: \"AIzaSyChMTwAb_hWwYdvcM_gSGcx84k_al-EtIA\",\n        onPlaceSelected: place => {\n          // await new Promise(r => setTimeout(r, 1000));\n          // console.log(place)\n          // places.push(place)\n          setP([...p, \"dd\"]); // dispatch({type:\"set_pois\" , payload:{allpois:places}})\n        },\n        options: {\n          types: ['geocode', 'establishment'],\n          componentRestrictions: {\n            country: \"LK\"\n          },\n          fields: [\"ALL\"]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), p.map(i => {\n        console.log(i);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}; // export const Map=()=>{\n//   const {state, dispatch}=useContext(TravelContext)\n//   const [open,setOpen]=useState(false);\n//   const [p,setP]=useState([])\n//   const [placeID,setPlaceID]=useState(0)\n//   const places=new Array()\n//     return(\n//         <>\n//           <GoogleMap style={{}}\n//             defaultZoom={8}\n//             defaultCenter={{ lat: 7.691418, lng:80.636696}}\n//             // defaultOptions={{ styles: mapStyles }}\n//           >\n//               {/* {places && places.map((item,index)=>{\n//                     return(\n//                       <>\n//                        <Marker key={index} position={item.geometry.location} onClick={()=>{setOpen(true); setPlaceID(index)}} />\n//                       </>\n//                     )\n//               })} */}\n//               {/* { open && <InfoWindow  onCloseClick={()=>setOpen(false)}\n//               position={\n//                 place[placeID].geometry.location\n//               }\n//               >\n//                 <>\n//                 <h1>{place[placeID].name}</h1>\n//                 <img src={place[placeID].photos[0].getUrl()} ></img>\n//                 <p>{place[placeID].formatted_address}</p>\n//                 </>\n//                 </InfoWindow>\n//               } */}\n//           </GoogleMap>\n//         <Autocomplete style={{width:\"40%\" ,height:\"30px\", padding:\"5px\", margin:\"15px\",background:\"grey\", borderRadius:\"5px\", color:\"white\"}}\n//         apiKey={\"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\"}\n//         onPlaceSelected={(poi) => {\n//           places.push(poi)\n//           dispatch({type:\"set_pois\" , payload:{allpois:places}})\n//           console.log(state)\n//         }}\n//         options={{\n//             types: ['geocode' , 'establishment'],\n//             componentRestrictions: { country: \"LK\" },\n//             fields:[\"ALL\"]\n//         }}\n//         >\n//         </Autocomplete>\n//         {/* <Flex>\n//           {p && p.map((item,index)=>{\n//             return(\n//               <>\n//               <Flex>\n//                 <HStack>\n//                   <h1>{index+1}</h1>\n//                   <h1>{item.name} </h1>\n//                 </HStack>\n//               </Flex>\n//               </>\n//             )\n//           })}\n//         </Flex> */}\n//         </>\n//     )\n// }\n// const MapWrapped = withScriptjs(withGoogleMap(Map));\n// export  function GMAP() {\n//     return (\n//         <Flex height=\"150vh\"  boxShadow=\"dark-lg\" justifyContent=\"center\" alignItems=\"center\" width=\"80%\">\n//         <MapWrapped\n//           googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY`}\n//           loadingElement={<div style={{ height: `100%` }} />}\n//           containerElement={<div style={{ height: `100%` ,width:\"100%\" }} />}\n//           mapElement={<div style={{ width: `50%`, height:\"80%\" }} />}\n//         />\n//       </Flex>\n//     );\n//   }\n\n_s(CustomPlan, \"L7ZZV9lo42wkHD8n0zHWRmQLDSM=\");\n\n_c = CustomPlan;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomPlan\");","map":{"version":3,"sources":["D:/sem 5 project travel guide app/Smart-travel-guide-app/adminportal/src/screens/TravelPlanApp/customPlan.js"],"names":["Flex","VStack","HStack","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","useState","useEffect","useContext","Autocomplete","TravelContext","Button","Heading","Image","MdDeleteForever","CustomPlan","open","setOpen","state","dispatch","display","setDisplay","p","setP","places","Array","width","height","padding","margin","background","borderRadius","color","place","types","componentRestrictions","country","fields","map","i","console","log"],"mappings":";;;AAAA,SAASA,IAAT,EAAcC,MAAd,EAAqBC,MAArB,QAAmC,mBAAnC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,SAAtC,EAAiDC,MAAjD,EAAyDC,UAAzD,QAA2E,mBAA3E;AACA,SAAQC,QAAR,EAAiBC,SAAjB,EAA2BC,UAA3B,QAA4C,OAA5C;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAAyBC,KAAzB,QAAwC,kBAAxC;AACA,SAASC,eAAT,QAAgC,gBAAhC;;;AAEA,OAAO,MAAMC,UAAU,GAAC,MAAI;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAeX,QAAQ,CAAC,KAAD,CAA7B;AACA,QAAM;AAACY,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAkBX,UAAU,CAACE,aAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAASC,UAAT,IAAqBf,QAAQ,CAAC,EAAD,CAAnC;AAEA,QAAM,CAACgB,CAAD,EAAGC,IAAH,IAASjB,QAAQ,CAAC,EAAD,CAAvB;AACA,QAAMkB,MAAM,GAAC,IAAIC,KAAJ,EAAb;AAME,sBACI;AAAA,2BACD,QAAC,IAAD;AAAM,MAAA,KAAK,EAAC,MAAZ;AAAmB,MAAA,UAAU,EAAC,QAA9B;AAAuC,MAAA,aAAa,EAAC,QAArD;AAA8D,MAAA,cAAc,EAAC,QAA7E;AAAA,8BAIC,QAAC,YAAD;AAAc,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC,KAAP;AAAcC,UAAAA,MAAM,EAAC,MAArB;AAA6BC,UAAAA,OAAO,EAAC,KAArC;AAA4CC,UAAAA,MAAM,EAAC,MAAnD;AAA0DC,UAAAA,UAAU,EAAC,MAArE;AAA6EC,UAAAA,YAAY,EAAC,KAA1F;AAAiGC,UAAAA,KAAK,EAAC;AAAvG,SAArB;AACA,QAAA,MAAM,EAAE,yCADR;AAGA,QAAA,eAAe,EAAGC,KAAD,IAAW;AAC1B;AAEA;AACA;AACAV,UAAAA,IAAI,CAAC,CAAC,GAAGD,CAAJ,EAAM,IAAN,CAAD,CAAJ,CAL0B,CAM1B;AAGD,SAZD;AAcA,QAAA,OAAO,EAAE;AACLY,UAAAA,KAAK,EAAE,CAAC,SAAD,EAAa,eAAb,CADF;AAELC,UAAAA,qBAAqB,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAFlB;AAGLC,UAAAA,MAAM,EAAC,CAAC,KAAD;AAHF;AAdT;AAAA;AAAA;AAAA;AAAA,cAJD,EAgCGf,CAAC,CAACgB,GAAF,CAAOC,CAAD,IAAK;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,OAFD,CAhCH;AAAA;AAAA;AAAA;AAAA;AAAA;AADC,mBADJ;AA6GH,CAzHM,C,CAoIP;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAMA;AAOA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA7PaxB,U;;KAAAA,U","sourcesContent":["import { Flex,VStack,HStack } from '@chakra-ui/layout';\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\r\nimport {useState,useEffect,useContext} from \"react\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { TravelContext } from \"../../context/TravelContext\"\r\nimport { Button, Heading,Image   } from \"@chakra-ui/react\"\r\nimport { MdDeleteForever } from \"react-icons/md\";\r\n\r\nexport const CustomPlan=()=>{\r\n  const [open,setOpen]=useState(false);\r\n  const {state, dispatch}=useContext(TravelContext)\r\n  const [display,setDisplay]=useState({})\r\n\r\n  const [p,setP]=useState([])\r\n  const places=new Array()\r\n\r\n  \r\n\r\n    \r\n    \r\n    return(\r\n        <>\r\n       <Flex width=\"100%\" alignItems=\"center\" flexDirection=\"column\" justifyContent=\"center\">\r\n\r\n        \r\n                  \r\n        <Autocomplete style={{width:\"40%\" ,height:\"30px\", padding:\"5px\", margin:\"15px\",background:\"grey\", borderRadius:\"5px\", color:\"white\"}}\r\n        apiKey={\"AIzaSyChMTwAb_hWwYdvcM_gSGcx84k_al-EtIA\"}\r\n\r\n        onPlaceSelected={(place) => {\r\n          // await new Promise(r => setTimeout(r, 1000));\r\n          \r\n          // console.log(place)\r\n          // places.push(place)\r\n          setP([...p,\"dd\"])\r\n          // dispatch({type:\"set_pois\" , payload:{allpois:places}})\r\n\r\n\r\n        }}\r\n\r\n        options={{\r\n            types: ['geocode' , 'establishment'],\r\n            componentRestrictions: { country: \"LK\" },\r\n            fields:[\"ALL\"]\r\n        }}\r\n        >\r\n        \r\n\r\n\r\n        </Autocomplete>\r\n\r\n\r\n\r\n        {\r\n          p.map((i)=>{\r\n            console.log(i)\r\n          })\r\n        }\r\n\r\n{/* \r\n        {state.allpois &&\r\n          p.map((item,index)=>{\r\n            return(\r\n              <>\r\n              \r\n              <Flex flexDirection=\"row\" m={3} >\r\n                 {index+1}\r\n                 <Button  size=\"sm\" p={2} onClick={()=>{\r\n\r\n                   setDisplay(places[index])\r\n\r\n                 }}>\r\n                  \r\n                  {item.name}\r\n                 </Button>\r\n\r\n\r\n                 <Button onClick={()=>{\r\n                   console.log(places)\r\n                   places.forEach(element => {\r\n                     console.log(element)\r\n                   });\r\n                    \r\n                    // setP(places)\r\n                    // dispatch({type:\"set_pois\" , payload:{allpois:places}})\r\n                 }}>\r\n                 <MdDeleteForever />\r\n                 </Button>\r\n              </Flex>\r\n              \r\n              </>\r\n            )\r\n          })\r\n        } */}\r\n\r\n{/* \r\n        <Button onClick={()=>{\r\n          console.log(p)\r\n        }}>\r\n\r\n\r\n        {\r\n          display ? <>\r\n          \r\n          \r\n          <Flex>\r\n          {display.name}\r\n          <Image   src={display.photos ? display.photos[0].getUrl() : \"\"}/>\r\n\r\n          </Flex>\r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          </> : \r\n          <></>\r\n        }\r\n\r\n        </Button> */}\r\n            \r\n\r\n      </Flex>\r\n        \r\n    \r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const Map=()=>{\r\n//   const {state, dispatch}=useContext(TravelContext)\r\n//   const [open,setOpen]=useState(false);\r\n//   const [p,setP]=useState([])\r\n//   const [placeID,setPlaceID]=useState(0)\r\n  \r\n//   const places=new Array()\r\n\r\n  \r\n  \r\n//     return(\r\n//         <>\r\n       \r\n\r\n//           <GoogleMap style={{}}\r\n//             defaultZoom={8}\r\n//             defaultCenter={{ lat: 7.691418, lng:80.636696}}\r\n//             // defaultOptions={{ styles: mapStyles }}\r\n//           >\r\n\r\n\r\n             \r\n\r\n//               {/* {places && places.map((item,index)=>{\r\n//                     return(\r\n//                       <>\r\n\r\n//                        <Marker key={index} position={item.geometry.location} onClick={()=>{setOpen(true); setPlaceID(index)}} />\r\n                      \r\n//                       </>\r\n//                     )\r\n                     \r\n\r\n//               })} */}\r\n\r\n\r\n//               {/* { open && <InfoWindow  onCloseClick={()=>setOpen(false)}\r\n//               position={\r\n//                 place[placeID].geometry.location\r\n//               }\r\n//               >\r\n//                 <>\r\n//                 <h1>{place[placeID].name}</h1>\r\n\r\n//                 <img src={place[placeID].photos[0].getUrl()} ></img>\r\n\r\n//                 <p>{place[placeID].formatted_address}</p>\r\n//                 </>\r\n                \r\n//                 </InfoWindow>\r\n                \r\n//               } */}\r\n\r\n          \r\n\r\n\r\n\r\n//           </GoogleMap>\r\n\r\n\r\n       \r\n\r\n\r\n          \r\n//         <Autocomplete style={{width:\"40%\" ,height:\"30px\", padding:\"5px\", margin:\"15px\",background:\"grey\", borderRadius:\"5px\", color:\"white\"}}\r\n//         apiKey={\"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\"}\r\n\r\n//         onPlaceSelected={(poi) => {\r\n//           places.push(poi)\r\n\r\n//           dispatch({type:\"set_pois\" , payload:{allpois:places}})\r\n\r\n//           console.log(state)\r\n            \r\n//         }}\r\n\r\n//         options={{\r\n//             types: ['geocode' , 'establishment'],\r\n//             componentRestrictions: { country: \"LK\" },\r\n//             fields:[\"ALL\"]\r\n//         }}\r\n//         >\r\n\r\n//         </Autocomplete>\r\n\r\n//         {/* <Flex>\r\n//           {p && p.map((item,index)=>{\r\n//             return(\r\n//               <>\r\n              \r\n//               <Flex>\r\n//                 <HStack>\r\n//                   <h1>{index+1}</h1>\r\n//                   <h1>{item.name} </h1>\r\n                  \r\n//                 </HStack>\r\n//               </Flex>\r\n              \r\n//               </>\r\n//             )\r\n//           })}\r\n//         </Flex> */}\r\n        \r\n//         </>\r\n//     )\r\n// }\r\n\r\n// const MapWrapped = withScriptjs(withGoogleMap(Map));\r\n\r\n\r\n// export  function GMAP() {\r\n//     return (\r\n//         <Flex height=\"150vh\"  boxShadow=\"dark-lg\" justifyContent=\"center\" alignItems=\"center\" width=\"80%\">\r\n//         <MapWrapped\r\n//           googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY`}\r\n//           loadingElement={<div style={{ height: `100%` }} />}\r\n//           containerElement={<div style={{ height: `100%` ,width:\"100%\" }} />}\r\n//           mapElement={<div style={{ width: `50%`, height:\"80%\" }} />}\r\n//         />\r\n//       </Flex>\r\n//     );\r\n//   }"]},"metadata":{},"sourceType":"module"}