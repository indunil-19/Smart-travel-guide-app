{"ast":null,"code":"const {\n  Client\n} = require(\"@googlemaps/google-maps-services-js\");\n\nexport const DeletePOI = async (index, index1, travelPlan = [[[], []], []]) => {\n  const client = new Client({});\n  var start_location = {};\n  var end_location = {};\n  var k = 0;\n  var l = 0; // for(var i=0; i<=index;i++){\n  //   for (var j=0; j<travelPlan[i].length;j++){\n  //     var k=k+1\n  //     if(i==index && j==index1){\n  //         l=k\n  //     }\n  //   }\n  // } \n\n  console.log(index, index1, travelPlan);\n  var travelDays = travelPlan[0].length;\n  var plan = travelPlan[0];\n\n  if (index > 0) {\n    if (index1 > 0) {\n      console.log(\"1\");\n      start_location = plan[index][index1 - 1].geometry.location;\n      travelPlan[0][index].pop(index1);\n    } else if (index1 == 0) {\n      console.log(\"2\");\n      start_location = plan[index - 1][plan[index - 1].length - 1].geometry.location; // travelPlan[0][index].pop(index1)\n    }\n  } else if (index == 0) {\n    if (index1 == 0) {\n      start_location = {\n        lat: 6.927079,\n        lng: 79.857750\n      }; // travelPlan[0][index].pop(index1)\n    } else if (index1 > 0) {\n      console.log(\"4\");\n      start_location = plan[index][index1 - 1].geometry.location; // travelPlan[0][index].pop(index1)\n    }\n  }\n\n  if (index < travelDays - 1) {\n    if (index1 == plan[index].length - 1) {\n      console.log(\"5\");\n      end_location = plan[index + 1][0].geometry.location; // travelPlan[0][index].pop(index1)\n    } else if (index1 < plan[index].length - 1) {\n      console.log(\"6\");\n      end_location = plan[index][index1 + 1].geometry.location; // travelPlan[0][index].pop(index1)\n    }\n  } else if (index == travelDays - 1) {\n    if (index1 == plan[index].length - 1) {\n      console.log(\"7\"); // travelPlan[0][index].pop(index1)\n\n      return;\n    } else if (index1 < plan[index].length - 1) {\n      console.log(\"8\");\n      end_location = plan[index][index1 + 1].geometry.location; //  travelPlan[0][index].pop(index1)\n    }\n  }\n\n  return client.directions({\n    params: {\n      origin: start_location,\n      destination: end_location,\n      optimizeWaypoints: true,\n      travelMode: 'DRIVING',\n      key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\"\n    }\n  }).then(response => {\n    const route = response.data.routes[0]; // travelPlan[1].pop(l)\n    // travelPlan[1][l+1]=route.legs[0]\n    // console.log(l)\n\n    return travelPlan;\n  }).catch(e => {\n    console.log(e);\n  });\n};\n_c = DeletePOI;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeletePOI\");","map":{"version":3,"sources":["D:/sem 5 project travel guide app/Smart-travel-guide-app/adminportal/src/services/EditPlanServices.js"],"names":["Client","require","DeletePOI","index","index1","travelPlan","client","start_location","end_location","k","l","console","log","travelDays","length","plan","geometry","location","pop","lat","lng","directions","params","origin","destination","optimizeWaypoints","travelMode","key","then","response","route","data","routes","catch","e"],"mappings":"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","sourcesContent":["const {Client} = require(\"@googlemaps/google-maps-services-js\");\r\n\r\n   \r\nexport const DeletePOI=async(index, index1, travelPlan=[[[],[]] ,[]])=>{\r\n    const client = new Client({});\r\n    var start_location={}\r\n    var end_location={}\r\n    var k=0\r\n    var l=0\r\n    // for(var i=0; i<=index;i++){\r\n    //   for (var j=0; j<travelPlan[i].length;j++){\r\n    //     var k=k+1\r\n    //     if(i==index && j==index1){\r\n    //         l=k\r\n    //     }\r\n    //   }\r\n    // } \r\n    \r\n    console.log(index,index1,travelPlan)\r\n    var travelDays=travelPlan[0].length\r\n    var plan=travelPlan[0]\r\n\r\n    if(index>0){\r\n      if(index1>0){\r\n        console.log(\"1\")\r\n        start_location=plan[index][index1-1].geometry.location\r\n        travelPlan[0][index].pop(index1)\r\n      }\r\n      else if(index1==0){\r\n        console.log(\"2\")\r\n        start_location=plan[index-1][plan[index-1].length-1].geometry.location\r\n        // travelPlan[0][index].pop(index1)\r\n      }\r\n      \r\n    }\r\n    else if(index==0){\r\n      if(index1==0){\r\n        start_location={lat:6.927079,lng:79.857750}\r\n        // travelPlan[0][index].pop(index1)\r\n\r\n      }\r\n      else if(index1>0){\r\n        console.log(\"4\")\r\n        start_location=plan[index][index1-1].geometry.location\r\n        // travelPlan[0][index].pop(index1)\r\n      }\r\n      \r\n    }\r\n\r\n\r\n    if(index<travelDays-1){\r\n      if(index1==plan[index].length-1){\r\n        console.log(\"5\")\r\n        end_location=plan[index+1][0].geometry.location\r\n        // travelPlan[0][index].pop(index1)\r\n      }\r\n      else if(index1<plan[index].length-1){\r\n        console.log(\"6\")\r\n        end_location=plan[index][index1+1].geometry.location\r\n        // travelPlan[0][index].pop(index1)\r\n      }\r\n    }\r\n    else if(index==travelDays-1){\r\n       if(index1==plan[index].length-1){\r\n\r\n        console.log(\"7\")\r\n        // travelPlan[0][index].pop(index1)\r\n          return\r\n       }\r\n       else if (index1<plan[index].length-1){\r\n         console.log(\"8\")\r\n         end_location=plan[index][index1+1].geometry.location\r\n        //  travelPlan[0][index].pop(index1)\r\n       }\r\n    }\r\n    \r\n\r\n    return client\r\n      .directions({params:{\r\n          origin:start_location,\r\n          destination:end_location,\r\n          optimizeWaypoints: true,\r\n          travelMode: 'DRIVING',\r\n          key: \"AIzaSyCB9FiwGVeEmdfBAwxiQpPuz0fsDMiwPWY\",\r\n\r\n        }})\r\n        .then((response) => {\r\n          const route = response.data.routes[0];\r\n          // travelPlan[1].pop(l)\r\n          // travelPlan[1][l+1]=route.legs[0]\r\n          // console.log(l)\r\n          return travelPlan\r\n         \r\n\r\n        })\r\n         .catch((e) =>{ \r\n           console.log(e)\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n \r\n   \r\n\r\n}"]},"metadata":{},"sourceType":"module"}